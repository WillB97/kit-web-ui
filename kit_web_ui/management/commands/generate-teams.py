"""
Create team accounts and MQTT credentials

Teams are named teamN, where N is the team number and is used for both the
username and mqtt username. The mqtt password is randomly generated and urlsafe.
Generated MQTT credentials use the broker listener specified by the --broker
argument. The topic root is set to the username.

If a wordlist is specified, the password is generated by choosing two words from
the wordlist and joining them with a hyphen. Otherwise, the password is a randomly
generated 12 character alphanumeric string.
"""
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    help = 'Generate team accounts and MQTT credentials'

    def add_arguments(self, parser) -> None:  # type: ignore
        parser.add_argument('--broker', required=True, type=str, help='Broker listener name')
        parser.add_argument(
            '--wordlist', type=str, help=(
                'Word list for password generation. If not specified, passwords will be '
                'randomly generated. i.e. /usr/share/dict/british-english'))
        parser.add_argument(
            '--num-teams', type=int, default=10, help='Number of teams to create')

    def handle(self, *args, **options) -> None:  # type: ignore
        from secrets import token_urlsafe

        from django.contrib.auth.models import User

        from kit_web_ui.models import BrokerListener, MqttConfig

        broker = BrokerListener.objects.get(name=options['broker'])

        if options['wordlist']:
            with open(options['wordlist']) as wordlist:
                self.wordlist = [
                    clean_word.lower()
                    for word in wordlist
                    if len(clean_word := word.strip()) > 4
                    and len(clean_word) < 10
                    and clean_word.isalpha()
                ]

        for team in range(1, options['num_teams'] + 1):
            username = f"team{team}"
            password = self.generate_password()
            user = User.objects.create_user(username, password=password)
            user.save()
            mqtt_config = MqttConfig.objects.create(
                name=f"Team {team}",
                user=user,
                broker=broker,
                username=username,
                password=token_urlsafe(),
                topic_root=username,
            )
            mqtt_config.save()
            self.stdout.write(f"Created team {team}: {username} {password}")

        self.stdout.write("Done")

    def generate_password(self) -> str:
        from secrets import choice
        from string import ascii_letters, digits

        if hasattr(self, 'wordlist'):
            return '-'.join(choice(self.wordlist) for _ in range(2))
        else:
            return ''.join(choice(ascii_letters + digits) for _ in range(12))
